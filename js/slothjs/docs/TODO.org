* DONE [2020-12-21 Mon] BlockStatement
* DONE [2020-12-21 Mon] IfStatement
* DONE [2020-12-21 Mon] ConditinalExpression
* DONE [2020-12-22 Tue] ForStatement
* DONE [2021-01-23 Sat] WhileStatement
* DONE [2021-01-23 Sat] DoWhileStatement
* DONE [2021-02-05 Fri] ForInExpression
* DONE [2021-01-24 Sun] BreakStatement, ContinueStatement
** DONE [2021-01-23 Sat] BreakStatement
** DONE [2021-01-23 Sat] ContinueStatement
** DONE [2021-01-23 Sat] LabeledStatement
** DONE [2021-01-23 Sat] labeled break
** DONE [2021-01-24 Sun] labeled continue
* DONE [2020-12-26 Sat] mutable values and assignment
* DONE [2021-01-14 Thu] rewrite the =Heap= to be =Vec<JSObject>=
* DONE [2020-12-31 Thu] make it a library
* DONE [2021-01-01 Fri] a repl executable
* TODO move tests to =tests/=
* TODO proper variable/declaration scopes [3/5]
** DONE [2021-02-13 Sat] variable hoisting
** DONE [2021-02-13 Sat] assignment to an outer variable
** DONE [2021-02-13 Sat] free-variables analysis for closures
** TODO =let= variables, block scope
** TODO =const= values
* DONE [2021-01-23 Sat] UpdateExpression
* DONE [2021-01-19 Tue] LogicalExpression...
** DONE [2021-01-19 Tue] &&
** DONE [2021-01-19 Tue] ||
* DONE [2021-01-04 Mon] UnaryExpression
** DONE [2021-01-03 Sun] everything, except...
** DONE [2021-01-04 Mon] =delete=
* DONE [2021-02-06 Sat] SequenceExpression
* DONE [2021-02-06 Sat] SwitchStatement
* DONE [2021-02-07 Sun] BinaryExpression [17/17]
** DONE [2020-12-30 Wed] ~==~ Abstract Equality Comparison
** DONE [2020-12-22 Tue] ~<~ Abstract Relationl Comparison
** DONE [2021-01-13 Wed] ~+~ between all types
** DONE [2021-01-19 Tue] ~===~
** DONE [2021-01-26 Tue] =<=
** DONE [2021-01-26 Tue] ~<=~
** DONE [2021-01-26 Tue] ~>~
** DONE [2021-01-30 Sat] =instanceof=
** DONE [2021-02-07 Sun] =in=
** DONE [2021-02-07 Sun] =/=
** DONE [2021-02-07 Sun] =%=
** DONE [2021-02-07 Sun] =**=
** DONE [2021-02-07 Sun] =|=
** DONE [2021-02-07 Sun] =^=
** DONE [2021-02-07 Sun] =<<=
** DONE [2021-02-07 Sun] =>>=
** DONE [2021-02-07 Sun] =>>>=
* DONE [2021-02-07 Sun] AssignmentExpression [7/7]
** DONE [2020-12-21 Mon] ~=~
** DONE [2021-01-02 Sat] ~+=~
** DONE [2021-01-15 Fri] ~-=~
** DONE [2021-01-14 Thu] ~*=~
** DONE [2021-02-07 Sun] ~/=~
** DONE [2021-02-07 Sun] ~&=~
** DONE [2021-02-07 Sun] ~|=~
* TODO user exceptions [3/4]
** DONE [2021-01-27 Wed] =throw=
** DONE [2021-01-28 Thu] =try=, =catch=, =finally=
** DONE [2021-01-31 Sun] =Error= objects
** TODO stacktraces with source locations
* TODO =Symbol= primitive
* TODO builtin =Object= [0/2]
** TODO static methods [5/20]
*** DONE [2021-01-05 Tue] .getOwnPropertyDescriptor
*** DONE [2021-01-08 Fri] .is()
*** DONE [2021-01-18 Mon] Object() constructor
*** DONE [2021-02-10 Wed] .create()
*** DONE [2021-02-10 Wed] .defineProperties()
*** TODO .getPrototypeOf()
*** TODO .setPrototypeOf()
*** TODO .assign()
*** TODO .keys()
*** TODO .values()
*** TODO .entries()
*** TODO .fromEntries()
*** TODO .getOwnPropertyDescriptors()
*** TODO .getOwnPropertyNames()
*** TODO .freeze()
*** TODO .isFrozen()
*** TODO .preventExtensions()
*** TODO .isExtensible()
*** TODO .seal()
*** TODO .isSealed()
** TODO Object.prototype [4/6]
*** DONE [2021-01-05 Tue] create it!
*** DONE [2021-01-08 Fri] .constructor
*** DONE [2021-01-18 Mon] .valueOf()
*** DONE [2021-02-13 Sat] .hasOwnProperty()
*** TODO .isPrototypeOf()
*** TODO .propertyIsEnumerable()
* TODO builtin =Function=
** DONE [2021-01-06 Wed] =src/builtin/function.rs=
** TODO static methods
** TODO Function.prototype [3/5]
*** DONE [2021-01-17 Sun] .constructor
*** DONE [2021-01-20 Wed] .call()
*** DONE [2021-01-20 Wed] .apply()
*** TODO .bind()
*** TODO ...everything else
* TODO builtin =Array=
** DONE [2021-01-10 Sun] =src/builtin/array.rs=
** DONE [2021-01-15 Fri] (de)serialization
** TODO Array static methods [0/3]
*** TODO Array.from
*** TODO Array.of
*** TODO Array.isArray()
** TODO Array.prototype [1/3]
*** DONE [2021-01-16 Sat] .toString()
*** TODO .length
*** TODO ...everything else
* TODO builtin =JSON=
* TODO builtin arrays
** DONE [2021-01-11 Mon] ArrayExpression
** DONE [2021-01-11 Mon] array members get/assign
* TODO builtin functions [0/3]
** TODO =parseInt=
** TODO =eval=
** TODO =isNaN=
* MAYBE builtin =assert= object
* MAYBE =console= in sljs
  This is I/O and should not live in the interpreter core.
* TODO builtin primitive wrappers [1/3]
** DONE [2021-01-20 Wed] =Boolean=
*** DONE [2021-01-20 Wed] scaffolding in =src/builtin/boolean.rs=
*** DONE [2021-01-20 Wed] Boolean constructor, =Object(true)=
*** DONE [2021-01-20 Wed] Boolean.prototype
**** DONE [2021-01-20 Wed] .valueOf
**** DONE [2021-01-20 Wed] .toString
** TODO =Number=
** TODO =String=
*** TODO string indexing
*** TODO =src/builtin/string.rs=
*** TODO String() constructor; Object("string")
*** TODO check escape notation
*** TODO static methods
**** TODO String.fromCharCode()
**** TODO String.fromCodePoint()
**** TODO String.raw()
*** TODO prototype
**** TODO .length
**** TODO .charAt()
**** TODO .concat()
**** TODO .includes()
**** TODO .endsWith()
**** TODO .indexOf()
**** TODO .lastIndexOf()
**** TODO ...
* DONE [2021-01-01 Fri] function calls [3/3]
** DONE [2021-01-01 Fri] CallExpression
** DONE [2021-01-16 Sun] immediate calls: ~(function(){})()~
** DONE [2021-01-23 Sat] array member calls: ~a[0]()~
* TODO user functions [3/4]
** DONE FunctionExpression
*** DONE [2021-01-06 Wed] function scope
*** DONE [2021-01-17 Sun] closures
*** DONE [2021-01-23 Sat] =arguments=
** DONE [2021-01-06 Wed] ReturnExpression
** DONE [2021-01-23 Sat] FunctionDeclaration
** TODO recursive functions
*** DONE [2021-01-17 Sun] make them work
*** TODO limit call stack, throw StackOverflow
*** MAYBE tail call optimization
* TODO user objects [4/5]
** DONE [2021-01-09 Sat] prototype chain
** DONE [2021-01-17 Sun] ThisExpression
** DONE [2021-01-18 Mon] NewExpression
** DONE [2021-01-31 Sun] properties lookup on the chain
** TODO properties, =get=, =set=

* MAYBE optimizations [0/5]
** TODO set up microbenchmarks
** MAYBE Intern all property names
   *Why*: all properties are currently stored by a =String= key.
   This means that each property key is 24 bytes and contains a pointer to its
   UTF8 buffer. A comparison of two keys means chasing two pointers and reading
   unknown extents of memory.
   *Interning*: all keys will become integer handles for interned strings. Each
   key lookup will be an int comparison.
   *Bonus*: =Symbol= will correspond to interned keys naturally.
** MAYBE Track hidden classes, especially after calling constructors
   *Why*: HashMap is not always the best storage; vector can be better.
   Abstracting property names into a hidden class can leave each object with a
   single vector of values and a pointer to the hidden class with the value
   description vector.
   Work: need to convert HashMap-based objects into class-based objects and back.
** MAYBE Frozen/sealed objects to store their properties in a vector.
   *Why*: frozen/sealed objects are by definition non-extensible.
   Attaching a hidden class looks like a good idea.
** MAYBE Bytecode compilation
   *Why*: AST-based interpretation is dumb.
* TODO garbage collection
* TODO the **endgoal**: be able to run Esprima internally [2/4]
** DONE [2021-02-08 Sun] all of Esprima syntax is understood
** DONE [2021-03-02 Tue] all of Esprima code can be loaded
** TODO there is a binary doing parsing via internal Esprima
** TODO interpreter doing parsing with Esprima can parse Esprima.
* TODO =eval=


#+TODO: BUG TODO MAYBE | DONE
